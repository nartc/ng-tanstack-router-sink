/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './app/routes/__root'
import { Route as LoginImport } from './app/routes/login'
import { Route as PathlessLayoutImport } from './app/routes/_pathlessLayout'
import { Route as AuthImport } from './app/routes/_auth'
import { Route as ExpensiveRouteImport } from './app/routes/expensive/route'
import { Route as IndexImport } from './app/routes/index'
import { Route as PathlessLayoutRouteBImport } from './app/routes/_pathlessLayout.route-b'
import { Route as PathlessLayoutRouteAImport } from './app/routes/_pathlessLayout.route-a'
import { Route as AuthProfileImport } from './app/routes/_auth.profile'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const ExpensiveRouteRoute = ExpensiveRouteImport.update({
  id: '/expensive',
  path: '/expensive',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./app/routes/expensive/route.lazy').then((d) => d.Route),
)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRouteBRoute = PathlessLayoutRouteBImport.update({
  id: '/route-b',
  path: '/route-b',
  getParentRoute: () => PathlessLayoutRoute,
} as any)

const PathlessLayoutRouteARoute = PathlessLayoutRouteAImport.update({
  id: '/route-a',
  path: '/route-a',
  getParentRoute: () => PathlessLayoutRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module 'tanstack-angular-router-experimental' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/expensive': {
      id: '/expensive'
      path: '/expensive'
      fullPath: '/expensive'
      preLoaderRoute: typeof ExpensiveRouteImport
      parentRoute: typeof rootRoute
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof AuthImport
    }
    '/_pathlessLayout/route-a': {
      id: '/_pathlessLayout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutRouteAImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/_pathlessLayout/route-b': {
      id: '/_pathlessLayout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutRouteBImport
      parentRoute: typeof PathlessLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthProfileRoute: typeof AuthProfileRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthProfileRoute: AuthProfileRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

interface PathlessLayoutRouteChildren {
  PathlessLayoutRouteARoute: typeof PathlessLayoutRouteARoute
  PathlessLayoutRouteBRoute: typeof PathlessLayoutRouteBRoute
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutRouteARoute: PathlessLayoutRouteARoute,
  PathlessLayoutRouteBRoute: PathlessLayoutRouteBRoute,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/expensive': typeof ExpensiveRouteRoute
  '': typeof PathlessLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/profile': typeof AuthProfileRoute
  '/route-a': typeof PathlessLayoutRouteARoute
  '/route-b': typeof PathlessLayoutRouteBRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/expensive': typeof ExpensiveRouteRoute
  '': typeof PathlessLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/profile': typeof AuthProfileRoute
  '/route-a': typeof PathlessLayoutRouteARoute
  '/route-b': typeof PathlessLayoutRouteBRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/expensive': typeof ExpensiveRouteRoute
  '/_auth': typeof AuthRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/_pathlessLayout/route-a': typeof PathlessLayoutRouteARoute
  '/_pathlessLayout/route-b': typeof PathlessLayoutRouteBRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/expensive'
    | ''
    | '/login'
    | '/profile'
    | '/route-a'
    | '/route-b'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/expensive' | '' | '/login' | '/profile' | '/route-a' | '/route-b'
  id:
    | '__root__'
    | '/'
    | '/expensive'
    | '/_auth'
    | '/_pathlessLayout'
    | '/login'
    | '/_auth/profile'
    | '/_pathlessLayout/route-a'
    | '/_pathlessLayout/route-b'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExpensiveRouteRoute: typeof ExpensiveRouteRoute
  AuthRoute: typeof AuthRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExpensiveRouteRoute: ExpensiveRouteRoute,
  AuthRoute: AuthRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.ts",
      "children": [
        "/",
        "/expensive",
        "/_auth",
        "/_pathlessLayout",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.ts"
    },
    "/expensive": {
      "filePath": "expensive/route.ts"
    },
    "/_auth": {
      "filePath": "_auth.ts",
      "children": [
        "/_auth/profile"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.ts",
      "children": [
        "/_pathlessLayout/route-a",
        "/_pathlessLayout/route-b"
      ]
    },
    "/login": {
      "filePath": "login.ts"
    },
    "/_auth/profile": {
      "filePath": "_auth.profile.ts",
      "parent": "/_auth"
    },
    "/_pathlessLayout/route-a": {
      "filePath": "_pathlessLayout.route-a.ts",
      "parent": "/_pathlessLayout"
    },
    "/_pathlessLayout/route-b": {
      "filePath": "_pathlessLayout.route-b.ts",
      "parent": "/_pathlessLayout"
    }
  }
}
ROUTE_MANIFEST_END */
